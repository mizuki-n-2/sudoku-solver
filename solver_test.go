package main

import (
	"strconv"
	"testing"
)

func Test_isValid(t *testing.T) {
	tests := []struct {
		name     string
		input    Board
		expected bool
	}{
		{
			"正常",
			Board{
				{0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0},
			},
			true,
		},
		{
			"行チェック失敗",
			Board{
				{1, 0, 0, 0, 0, 0, 1, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0},
			},
			false,
		},
		{
			"列チェック失敗",
			Board{
				{1, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0},
				{1, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0},
			},
			false,
		},
		{
			"3×3チェック失敗",
			Board{
				{1, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 1, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0},
			},
			false,
		},
	}

	for _, tt := range tests {
		if isValid(&tt.input) != tt.expected {
			t.Errorf("%s test failed. want=%t", tt.name, tt.expected)
		}
	}
}

func Test_solve(t *testing.T) {
	tests := []struct {
		input          string
		expectedStr    string
		expectedResult bool
	}{
		{
			".5..83.17...1..4..3.4..56.8....3...9.9.8245....6....7...9....5...729..861.36.72.4",
			"652483917978162435314975628825736149791824563436519872269348751547291386183657294",
			true,
		},
		{
			"2.6.3......1.65.7..471.8.5.5......29..8.194.6...42...1....428..6.93....5.7.....13",
			"256734198891265374347198652514683729728519436963427581135942867689371245472856913",
			true,
		},
		{
			"..45.21781...9..3....8....46..45.....7.9...128.12.35..4.......935..6.8.7.9.3..62.",
			"964532178187694235235817964629451783573986412841273596416728359352169847798345621",
			true,
		},
		{
			"59....147...9....8.72....3.7...4.29..2..3.8.68..17..5...5764..9.36..5...1..8....2",
			"598326147314957628672481935753648291421539876869172453285764319936215784147893562",
			true,
		},
		{
			"9...84.6.6.4..52.7.3..7..8.76...15...53.....1...4.96.31.5.26.9...2.4....8....371.",
			"927384165684915237531672489769231548453768921218459673175826394392147856846593712",
			true,
		},
	}

	for _, tt := range tests {
		board, result := solve(tt.input)
		if parseBoard(board) != tt.expectedStr {
			t.Errorf("test faild... want=%s, got=%s", tt.expectedStr, parseBoard(board))
		}

		if result != tt.expectedResult {
			t.Errorf("test failed... want=%t, got=%t", tt.expectedResult, result)
		}
	}
}

func parseBoard(board Board) string {
	var str string
	for _, row := range board {
		for _, v := range row {
			if v == 0 {
				str += "."
				continue
			}
			str += strconv.Itoa(v)
		}
	}

	return str
}
